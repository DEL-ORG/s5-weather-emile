
pipeline {
    agent {
        label ("aws-deploy")
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        timeout (time: 60, unit: 'MINUTES')
        timestamps()
    }
  
  // environment {
    //     DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    // }
    stages {
        stage('Test-Auth-Binaries') {
         agent {
            docker {
              image 'golang:alpine'
              args '-u root:root'
            }
            }
            steps {
                sh '''
                cd weatherapp/auth/src/main
                go build
                go tess
                ls -latr
                cd -
                '''
            }
        }

       stage('Test-UI-Binaries') {
         agent {
            docker {
              image 'node:17'
              args '-u root:root'
            }
            }
            steps {
                sh '''
                cd weatherapp/UI
                npm run
                ls -latr
                cd -
                '''
            }
        }

      stage('Test-Weather-Binaries') {
         agent {
            docker {
              image 'python:3.8-slim-buster'
              args '-u root:root'
            }
            }
            steps {
                sh '''
                cd weatherapp/weather
                pip3 install -r requirements.txt
                ls -latr
                cd -
                '''
            }
        }


    }
}


             

